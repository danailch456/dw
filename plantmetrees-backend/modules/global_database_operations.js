const logger = require('../management/logger.js');
const log = new logger().get();

let _db = null;

/**
 * Finds user or users accordnig to given options.
 * In case of multiple users found,returns new promise resolving with an array of the resulting objects;
 * In case of a single user found, returns new promise resolving with the resulting object object;
 * in case of an error, returns new promise rejecting with the 'err' object and logs the options parameter together with 'err' 
 * @param {Object} options The options will be passed as 'where' 
 * field in the querry generated by sequelize
 */
function findUsers(options) {
    return new Promise(function (resolve, reject) {
        log.info(`Searching for users with:${JSON.stringify(options)}`);
        let searchOptions = {
            raw: true,
            rejectOnEmpty: true
        }
        if (options != null) {
            searchOptions.where = options;
        }

        _db.models.Users.findAll(searchOptions).then(function (users) {
            log.info(`Found users:${JSON.stringify(users)}`);
            if (users.length > 1) {
                resolve(users);
            } else {
                resolve(users[0]);
            }
        }).catch(function (err) {
            log.error(`Error(${(typeof err == 'object') ? err.toString() : err}) 
            finding users with:${JSON.stringify(options)}`);
            reject(err);
        });
    });
}

function userFindOrCreate(user, profile, callback) {
    _db.models.Users.findOrCreate({
        where: user,
        raw: true,
        defaults: profile
    }).then(function ([user_db, created]) {
        if (created) {
            log.info(`Created user:${JSON.stringify(user_db)}`);
        } else {
            log.info(`Found user:${JSON.stringify(user_db)}`);
        }
        callback(null, user_db, created);
    }).catch(function (err) {
        log.error(`Error:${err} finding/creating user:
        ${(typeof err == 'object') ? err.toString() : err}`);
        callback(err);
    });
}

/**
 * Resolves if the token is valid and increments the 'peopleInvited' 
 * field of the corresponding 'invitationLink' object;
 * Rejects if the token is not valid;
 * @param {String} token Invitation token
 */
function resolveInvitationLink(token) {
    const options = {
        where: {
            token: token
        },
        rejectOnEmpty: true
    }
    const changes = {
        peopleInvited: _db.increment('peopleInvited')
    }
    _db.models.InvitationLinks.findOne(options).then(function (link) {
        ++link.peopleInvited;
        link.save();
        log.info(`Resolved invitation link with token:${token}`)
        return;
    }).catch(function (err) {
        log.error(`Error:${err} resolving invitation link:
            ${(typeof err == 'object') ? err.toString() : err}`);
        return;
    });
}

/**
 * 
 * @param {*} user 
 * @param {*} role 
 */
function hasRole(userId, role) {
    return new Promise(function (resolve, reject) {
        let options = {
            where: {
                role: {
                    [_db.or()]: [role,'platform_admin']
                }, 
                grantedTo:userId
            },
            rejectOnEmpty: true,
            raw: true
        }
    
        _db.models.RoleAssignments.findAll(options).then(function () {
            log.info(`User ${userId} has the required role: ${role}`);
            resolve();
        }).catch(function (err) {
            log.error(`User ${userId} desn't have the required role: ${role}`);
            reject();
        });
    });
}

/**
 * 
 * @param {*} userId 
 * @param {*} badge 
 * @param {*} value 
 */
function trackBadge(ownerId, badge, progress){
    _db.models.Badges.upsert({
        ownerId,
        type:badge,
        progress
    }).then(function (created) {
        log.info(`Upsurted badge: owner ${ownerId}, type ${badge}, operation ${created}`);
    }).catch(function (err) {
        log.error(`Error:${(typeof err == 'object') ? err.toString() : err},
        upserting badge: owner ${ownerId}, type ${badge}`);
    });
}

/**
 * 
 * @param {*} userId 
 * @param {*} campaignId 
 */
function hasPerms(userId, campaignId) {
    
}

function getForestManager(forestId) {
    
}

module.exports = function (db) {
    _db = db;
    return {
        findUsers,
        userFindOrCreate,
        resolveInvitationLink,
        //getInvitationLink
        trackBadge,
        hasRole
    }
}